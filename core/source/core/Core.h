#pragma once

#include <cstddef>
namespace crbn
{

void start_sim();

typedef double coord_type; 

struct pos
{
    coord_type x, y;
};

struct particle_2d
{
    coord_type mass = 0;
    coord_type vel_y = 0;
    coord_type vel_x = 0;
    coord_type xpos = 0;
    coord_type ypos = 0;
    
};


class Uniform_Sphere_Sim_2d
{
public: // Public callable functions :

    // Called to run a single "frame" of the simulation.
    // Maby it will be async?
    void runAsync(float elapsedTime);

    // Gets the coord buf generated by the current async process.
    // If the async Thread isnt finished, then it will stall till it is
    coord_type* getCoordBuf();

    // Does what it says, sets the ammount of particles
    // Returns the size of the particle array which has DOUBLE the NUMBER OF ELEMENTS (NOT BYTES) particle count 
    size_t setParticleCount(size_t particles);

    void setParticle(particle_2d& part, size_t element);

    Uniform_Sphere_Sim_2d();
    ~Uniform_Sphere_Sim_2d();

private: // Member Variables
    coord_type* _coordinate_array;
    std::size_t _coordinate_array_size;
    bool _coords_ready;
    size_t _particle_count;
    particle_2d* _particles;

    // temporary : 
    particle_2d particle;
    coord_type tempmod;
    coord_type acceleration = -9.81;

private: // Member Functions


};

}
